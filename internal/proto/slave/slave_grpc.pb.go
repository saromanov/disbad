// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package slave

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlaveClient is the client API for Slave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlaveClient interface {
	Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
	Leave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
	Run(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	IsLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Boolean, error)
}

type slaveClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveClient(cc grpc.ClientConnInterface) SlaveClient {
	return &slaveClient{cc}
}

func (c *slaveClient) Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/slave.Slave/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveClient) Leave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/slave.Slave/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveClient) Run(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/slave.Slave/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveClient) IsLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/slave.Slave/IsLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServer is the server API for Slave service.
// All implementations must embed UnimplementedSlaveServer
// for forward compatibility
type SlaveServer interface {
	Join(context.Context, *Node) (*Void, error)
	Leave(context.Context, *Node) (*Void, error)
	Run(context.Context, *Command) (*Response, error)
	IsLeader(context.Context, *Void) (*Boolean, error)
	mustEmbedUnimplementedSlaveServer()
}

// UnimplementedSlaveServer must be embedded to have forward compatible implementations.
type UnimplementedSlaveServer struct {
}

func (UnimplementedSlaveServer) Join(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedSlaveServer) Leave(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedSlaveServer) Run(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedSlaveServer) IsLeader(context.Context, *Void) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeader not implemented")
}
func (UnimplementedSlaveServer) mustEmbedUnimplementedSlaveServer() {}

// UnsafeSlaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlaveServer will
// result in compilation errors.
type UnsafeSlaveServer interface {
	mustEmbedUnimplementedSlaveServer()
}

func RegisterSlaveServer(s grpc.ServiceRegistrar, srv SlaveServer) {
	s.RegisterService(&Slave_ServiceDesc, srv)
}

func _Slave_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slave.Slave/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).Join(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slave_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slave.Slave/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).Leave(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slave_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slave.Slave/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).Run(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slave_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).IsLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slave.Slave/IsLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).IsLeader(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Slave_ServiceDesc is the grpc.ServiceDesc for Slave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slave.Slave",
	HandlerType: (*SlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Slave_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Slave_Leave_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Slave_Run_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _Slave_IsLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}
